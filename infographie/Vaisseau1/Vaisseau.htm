<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<title>TD_5</title>




<script type="x-shader/x-vertex" id="vshader">
     uniform mat4 projection;
     uniform mat4 modelview;
     uniform vec4 lightPosition;
     uniform mat3 normalMatrix;

     attribute vec3 vcoords;
     attribute vec3 vnormal;
     attribute vec2 vtexcoord;

     varying vec3 fN, fL, fE;
     varying vec3 fviewCoords;
     varying vec2 fTexCoord;

     void main() {
        vec4 eyeCoords = modelview * vec4(vcoords,1.0);
        gl_Position = projection * eyeCoords;

        vec3 pos = eyeCoords.xyz;

          // Modify light position according to the 
          // transformations applied if you want the light
          // to move with the objects
//        vec3 light = (modelview * lightPosition).xyz;
        vec3 light = (lightPosition).xyz;

          // Now compute vectors L, E and N.
          // Note that N is affected by the 
          // transformations applied.

        fL = normalize( light - pos );
        fE = normalize(-pos);
        fN = normalMatrix * normalize(vnormal);

  
        fviewCoords = eyeCoords.xyz;
        fTexCoord = vtexcoord;
     }
</script>

<script id="fshader" type="x-shader/x-fragment">

precision mediump float;

     uniform vec4 ambientProduct;
     uniform vec4 diffuseProduct;
     uniform vec4 specularProduct;
     uniform float shininess;

     varying vec3 fN, fL, fE;
     varying vec3 fviewCoords;
     varying vec2 fTexCoord;
	 
	 uniform sampler2D texture;
	uniform float alpha; // TRANSPARENT
     void main() {

          vec4 Color;
    
          vec3 H = normalize( fL + fE );
          vec4 ambient = ambientProduct;
 
          float factorLN = max( dot(fL, fN), 0.0 );
          vec4  diffuse = factorLN*diffuseProduct;

          float factorNH = pow( max(dot(fN, H), 0.0), shininess );
          vec4  specular = factorNH * specularProduct;
    
          if( dot(fL, fN) < 0.0 )
              specular = vec4(0.0, 0.0, 0.0, 1.0);

          Color = ambient + diffuse + specular;
          Color.a = 1.0;
			
          gl_FragColor = Color * texture2D(texture, fTexCoord); //TRANSPARENT
     }
</script>

<script type="text/javascript" src="Vaisseau_fichiers/simple-rotator.js"></script>
<script type="text/javascript" src="Vaisseau_fichiers/basic-objects-IFS.js"></script>
<script type="text/javascript" src="Vaisseau_fichiers/MV.js"></script>
<script type="text/javascript" src="Vaisseau_fichiers/Vaisseau.js"></script>

</head>
<body style="background-color:#DDD">


<table style="width: 100%">
    <colgroup>
       <col style="width: 15%;" span="1">
       <col style="width: 85%;" span="1">
    </colgroup>

    <tbody>
        <tr>
            <td>

				<h2>- WebGL -</h2>
				<h2>Vaisseau <a href="https://www.google.com/search?q=warhammer+40k+thunderhawk&tbm=isch&ved=2ahUKEwigmezz__vtAhWKNd8KHa1MBQQQ2-cCegQIABAA&oq=warhammer+40k+thunderhawk&gs_lcp=CgNpbWcQA1AAWABg4JAFaABwAHgAgAEAiAEAkgEAmAEAqgELZ3dzLXdpei1pbWc&sclient=img&ei=Jr_vX6DuJYrr_AatmZUg&bih=597&biw=1242&hl=fr">"Thunderhawk"</a> tiré de l'univer de Warhammer 40k et modèle de Phong</h2>
				<h3>Grégoire Intzopoulos</h3>
				<br>
				<h4>Appuyez sur la touche F11 pour passer en mode "plein écran"</h4>
				<br><h4>Utilisez la souris pour faire tourner le vaisseau.
				</h4>
				<br>
				<h4><a href="https://gintzopoulos.github.io/infographie/Vaisseau2/Vaisseau.htm">Cliquez ici pour retourner à la scene complète.</a></h4>
				<noscript><hr><h3>This page requires Javascript and a web browser that supports WebGL</h3><hr></noscript>
				
			</td>
            <td>			
				<div>
				<canvas width="902" height="902" id="glcanvas" style="background-color:blue"></canvas>
				</div>
			</td>
        </tr>
    </tbody>
</table>



</body></html>